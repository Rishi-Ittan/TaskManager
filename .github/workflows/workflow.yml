# This workflow builds a Spring Boot application using Gradle,
# creates a Docker image, and pushes it to Docker Hub.

name: Spring Boot CI/CD to Docker Hub

# Configure when the workflow should run.
on:
  push:
    branches:
      - main # Trigger on pushes to the 'main' branch.
  pull_request:
    branches:
      - main # Trigger on pull requests to the 'main' branch.
  workflow_dispatch: # Allows manual triggering of the workflow from the GitHub UI.

# Define the jobs that will run as part of this workflow.
jobs:
  build-and-push:
    # Specify the runner environment. ubuntu-latest is a common choice.
    runs-on: ubuntu-latest

    # Define the steps for this job.
    steps:
      # Step 1: Checkout the repository code.
      # This action fetches your repository's code onto the runner.
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up Java Development Kit (JDK).
      # This action sets up the specified Java version for Gradle to use.
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21' # Specify the Java version your Spring Boot project uses.
          distribution: 'temurin' # Recommended distribution for OpenJDK.
          cache: 'gradle' # Cache Gradle dependencies to speed up builds.

      # Step 3: Grant execute permission to gradlew.
      # This is necessary to run the Gradle wrapper script.
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Step 4: Build the Spring Boot application with Gradle.
      # This command runs the 'build' task, which typically compiles, tests, and packages the application.
      - name: Build with Gradle
        run: ./gradlew build -x test # '-x test' skips tests; remove if you want tests to run during build.

      # Step 5: Log in to Docker Hub.
      # This action authenticates with Docker Hub using the provided secrets.
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }} # Access Docker Hub username from GitHub secrets.
          password: ${{ secrets.DOCKER_PASSWORD }} # Access Docker Hub password/access token from GitHub secrets.

      # Step 6: Build the Docker image.
      # This action builds the Docker image based on the Dockerfile in your repository.
      # It tags the image with the repository name and a unique tag (GitHub run number).
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: . # The build context is the current directory.
          push: false # Set to false initially, we'll push in the next step.
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/task-manager:latest # Replace 'your-spring-boot-app' with your desired image name.
            ${{ secrets.DOCKER_USERNAME }}/task-manager:${{ github.run_number }} # Tag with a unique run number.

      # Step 7: Push the Docker image to Docker Hub.
      # This action pushes the built Docker image to your Docker Hub repository.
      - name: Push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true # Set to true to push the image.
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/task-manager:latest
            ${{ secrets.DOCKER_USERNAME }}/task-manager:${{ github.run_number }}
          # You can add build-args here if your Dockerfile needs them, e.g.:
          # build-args: |
          #   VERSION=${{ github.run_number }}
